---
name: Numpy Scan

on:
  push:
  #  branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    strategy:
      matrix:
        os: [windows-latest]
        python-version: [3.8]
        TYPE: [python-pip, conda-pip, conda-conda]
        PACKAGE: [numpy]
        include:
          - TYPE: python-pip
            INSTALLER: pip
            PKG_INSTALL: pip
            EXEC: ''
          - TYPE: conda-pip
            INSTALLER: conda
            PKG_INSTALL: pip
            EXEC: conda run -n env
          - TYPE: conda-conda
            INSTALLER: conda
            PKG_INSTALL: conda
            EXEC: conda run -n env
          - TYPE: python-pip-mkl
            os: windows-latest
            INSTALLER: pip
            PKG_INSTALL: pip
            python-version: 3.8
            PACKAGE: https://download.lfd.uci.edu/pythonlibs/w3jqiv8s/numpy-1.19.1+mkl-cp38-cp38-win_amd64.whl

    env:
      GITHUB_CONTEXT: ${{ toJson(github) }}
      MATRIX_NAME: ${{ matrix.os }}-python${{ matrix.python-version }}-${{ matrix.TYPE }}
      MATRIX_CONTEXT: ${{ toJson(matrix) }}
      JOB_NAME: rename-me-later

    steps:
      - name: Set names
        shell: python
        run: |
            """Generate a suitable name for this build. This is the same for all
            elements in the matrix."""

            import os, json
            context = json.loads(os.environ["GITHUB_CONTEXT"])
            latest_commit = context["event"]["head_commit"]

            # Enumerate by build number so that all builds can be easily sorted
            # into chonalogical order
            enum = context["run_number"]

            # Add the 1st line of the last commit's message.
            message = latest_commit["message"].split("\n")[0].replace(" ", "_")

            # And its commit id.
            commit_id = latest_commit["id"]

            print("::set-env name=COMMIT_ID::{}".format(commit_id))
            print("::set-env name=JOB_NAME::context {}--{}--{}".format(
                     enum, message, commit_id))

      - name: Check names
        run: |
          echo ${{ env.MATRIX_NAME}}
          echo ${{ env.JOB_NAME }}

      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        if: matrix.INSTALLER == 'pip'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup conda
        if: matrix.INSTALLER != 'pip'
        uses: s-weigand/setup-conda@v1
        with:
          update-conda: true
          conda-channels: anaconda, conda-forge

      - name: Create conda env
        if: matrix.INSTALLER != 'pip'
        run: conda create -y -n env python=${{ matrix.python-version }}

      - name: Init conda windows
        if: (matrix.INSTALLER != 'pip') && (matrix.os == 'windows-latest')
        run: |
          conda init cmd.exe
          conda init powershell

      - name: Init conda macos
        if: (matrix.INSTALLER != 'pip') && (matrix.os == 'macos-latest')
        run: |
          conda init powershell

      - name: Install dependencies
        run: |
          ${{ matrix.EXEC }} python -m pip install --upgrade pip
          ${{ matrix.EXEC }} ${{ matrix.INSTALLER }} install pytest psutil hypothesis nose
          ${{ matrix.EXEC }} ${{ matrix.PKG_INSTALL }} install ${{ matrix.PACKAGE }}
          ${{ matrix.EXEC }} pip install -e .

      - name: Show environment
        run: |

          ${{ matrix.EXEC }} python -VV
          ${{ matrix.EXEC }} python -c "from pprint import pprint; import os; pprint(dict(os.environ))"
          ${{ matrix.EXEC }} pip freeze

      - name: Run dll sniff tests
        run: |
          ${{ matrix.EXEC }} ${{ matrix.PKG_INSTALL }} -V
          ${{ matrix.EXEC }} python packages/numpy/scan.py

      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.MATRIX_NAME }}
          path: packages/numpy/*.json

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "packages/numpy/*.json"
          commit: ${{ env.COMMIT_ID }}
          name: ${{ env.JOB_NAME }}
          replacesArtifacts: true
          tag: ${{ github.run_number }}
          token: ${{ secrets.GITHUB_TOKEN }}
