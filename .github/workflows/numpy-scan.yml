# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
---
name: Numpy Scan

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [windows-latest, macos-latest, ubuntu-latest]
        os: [ubuntu-latest]
        python-version: [3.7]
        TYPE: [python-pip, conda-conda]
        include:
          - TYPE: python-pip
            INSTALL: pip
            PKG_INSTALL: pip
            ACTIVATE: ''
   #       - TYPE: conda-pip
  #          INSTALL: conda
 #           PKG_INSTALL: pip
#            ACTIVATE: (/usr/share/miniconda/etc/profile.d/conda.sh) && (conda activate)
          - TYPE: conda-conda
            INSTALL: conda
            PKG_INSTALL: conda
            ACTIVATE: conda run 

    env:
      GITHUB_CONTEXT: ${{ toJson(github) }}
      MATRIX_NAME: ${{ matrix.os }}-python${{ matrix.python-version }}-${{ matrix.TYPE }}
      MATRIX_CONTEXT: ${{ toJson(matrix) }}

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Check name
        run: echo "$MATRIX_NAME"

      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        if: matrix.INSTALL == 'pip'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup conda
        if: matrix.INSTALL != 'pip'
        uses: s-weigand/setup-conda@v1
        with:
          update-conda: true
          python-version: ${{ matrix.python-version }}
          conda-channels: anaconda, conda-forge

      - name: Init conda windows
        if: (matrix.INSTALL != 'pip') && (matrix.os == 'windows-latest')
        run: |
          conda init cmd.exe
          conda init powershell

      - name: Init conda macos
        if: (matrix.INSTALL != 'pip') && (matrix.os == 'macos-latest')
        run: |
          conda init powershell

      - name: Init conda linux
        if: (matrix.INSTALL != 'pip') && (matrix.os == 'ubuntu-latest_')
        run: |
          ${{ matrix.ACTIVATE }}
        
      - name: Install dependencies
        run: |
          ${{ matrix.ACTIVATE }} python -m pip install --upgrade pip
          ${{ matrix.ACTIVATE }} ${{ matrix.INSTALL }} install pytest psutil hypothesis
          ${{ matrix.ACTIVATE }} ${{ matrix.PKG_INSTALL }} install numpy
          ${{ matrix.ACTIVATE }} pip install -e .

      - name: Show environment
        run: |
          
          ${{ matrix.ACTIVATE }} python -VV
          ${{ matrix.ACTIVATE }} python -c "from pprint import pprint; import os; pprint(dict(os.environ))"
          ${{ matrix.ACTIVATE }} pip freeze

      - name: Run dll sniff tests
        run: |
          ${{ matrix.ACTIVATE }} ${{ matrix.PKG_INSTALL }} -V
          ${{ matrix.ACTIVATE }} python packages/numpy/scan.py

      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.MATRIX_NAME }}
          path: packages/numpy/*.json
